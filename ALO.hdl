
/*
TODO:
! SS => Suma sin signo.
! RS => Resta sin signo.
* S => Suma con signo.
* R => Resta con signo.
! F => Suma IEE745 16 bits.
*/

CHIP ALO{
    IN x[16], y[16], fo[2], con[6],menosuno[6];
    OUT out[16], ng, zr;
    PARTS:
        //? Suma con signo y sin signo.
        Add16(a=x, b=y,sum=sOut);

        //? Resta con signo y sin signo.
        Ca2(a=y, out=Ca2y);
        Add16(a=x, b=Ca2y, sum=rOut);
        
        //? IEEE754 16 bits.
        
        //* Sacar los exponentes.
        Add6(a=x[9..14], b=con, sum=IEEexpoX);
        Add6(a=y[9..14], b=con, sum=IEEexpoY);

        //* Encontrar si a < b o b < a o a = b. 
        Compare6(a=IEEexpoX, b=IEEexpoY, lt= altb, eq = aeqb);
        Compare6(a=IEEexpoY, b=IEEexpoX, lt= blta);

        //* Saber cual es el exponente del resultado.
        Mux16(a[0..5]=x[9..14], a[6..15]=false, b[0..5]=y[9..14], b[6..15]=false,  sel=altb, out[0..5]=rExponent);
        
        //* Negamos los exponentes
        Ca2(a[0..5]=IEEexpoX, a[6..15]=false, out=Ca2exX);
        Ca2(a[0..5]=IEEexpoY, a[6..15]=false, out=Ca2exY);

        //* Restamos para saber cual es el resultado positivo.
        Add16(a[0..5]=IEEexpoY,a[6..15]=false, b=Ca2exX, sum=yminusx);
        Add16(a[0..5]=IEEexpoX,a[6..15]=false, b=Ca2exY, sum=xminusy);

        //* Resta para saber cuanto mover la coma.
        Mux16(a=xminusy, b=yminusx, sel=altb, out[0..2]=numToAdd);

        //* Encontrar fraccion del Menor exponente.
        Mux16(a=y, b=x, sel=altb,out[0..8]=opFractionLow);

        //* Encontrar fraccion del Mayor exponente.
        Mux16(a=x, b=y, sel=altb,out[0..8]=opFractionHigh, out[0]=outSigResult);
        
        //* Añadir el 1 a la izuierda a los dos
        RightShifter(in=opFractionLow, out=shiftLow);
        RightShifter(in=opFractionHigh, out=shiftHigh);
        
        //* Añadir 0 a la izquierda 
        RightShifterZero(in=shiftLow, out=shift1);

        RightShifterZero(in=shift1, out=shift2);

        RightShifterZero(in=shift2, out=shift3);

        RightShifterZero(in=shift3, out=shift4);

        RightShifterZero(in=shift4, out=shift5);

        RightShifterZero(in=shift5, out=shift6);

        RightShifterZero(in=shift6, out=shift7);

        Add6(a[0..2]=numToAdd,a[3..5] = false, b=menosuno, sum = diffFlag);
        Mux6(a=diffFlag, b[0..2]=numToAdd, b[3..5]=false, sel=aeqb, out[0..2]=mux9Flag);

        Mux8Way9(a=shiftLow,b=shift1,c=shift2,d=shift3,e=shift4,f=shift5,g=shift6,h=shift7,sel=mux9Flag, out=shiftResult);

        Mux9(a=opFractionHigh, b=shiftResult, sel=aeqb, out=finalHighShift);

        //* Si son iguales
        Add9carry(a=shiftResult,b=finalHighShift, sum=finalEqFraction, carry=isCarry);
        // Add6(a=rExponent, b=true, sum=expResultOne);
        Inc6(a=rExponent, sum=expResultOne);
        // RightShifterZero16(in=outEqFraction, out=finalEqFraction);
        
        //* Sumamos las fracciones.
        Add9(a=shiftResult,b=finalHighShift,sum=outLtFraccion);

        Mux9(a=outLtFraccion, b=finalEqFraction, sel=aeqb, out[0..8]=outFraccionResult);

        Mux6(a=rExponent, b=expResultOne, sel=isCarry, out=finalExpo);

        IEEE(s=outSigResult, e=finalExpo, f=outFraccionResult, out=outIEEE);

        // 8 bit add between exponent [14..9] and -31 100001

        Mux4Way16(a=sOut, b=rOut, c=outIEEE, d=false, sel=fo, out=out);
        
        
}